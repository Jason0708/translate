Cache Poisoning
缓存投毒
    This is an Attack. To view all attacks, please see the Attack Category page. 


Last revision (mm/dd/yy): 04/23/2009 (please view source)
Description

The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even the browser cache of a single user. If a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue to receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although only the user of the local browser instance will be affected.
恶意构造的回应报文如果被缓存，造成的冲击会被放大，不论是一个被多用户使用的web缓存，还是单个用户用的浏览器缓存。
如果一个回应报文被缓存在一个web缓存中，就行代理服务器中的web缓存，然后所有的用户将继续接受恶意的内容，知道缓存的实体被老化清除。
相类似的，如果回应报文被缓存在一个单独用户的浏览器中，然后这个用户将继续接受恶意内容直到缓存内容被老化清理，
尽管只有本地浏览器的使用者被影响。
To successfully carry out such an attack, an attacker:
为了成功执行这种攻击，一个攻击者：
    Finds the vulnerable service code, which allows them to fill the HTTP header field with many headers.
	找到一个允许他们用许多头来填充HTTP头的漏洞服务代码。
    Forces the cache server to flush its actual cache content, which we want to be cached by the servers.
    强力清除我们希望缓存服务器缓存的当前缓存内容
	Sends a specially crafted request, which will be stored in cache.
    发送一个特殊的经过精心设计的请求，这个请求会被保存在缓存中
	Sends the next request. The previously injected content stored in cache will be the response to this request.
    发送下一个请求，缓存保存的上一次注入的内容，会被回应。
This attack is rather difficult to carry out in a real environment. The list of conditions is long and hard to accomplish by the attacker. However it's easier to use this technique than Cross-User Defacement.
这种攻击在现实的环境中相当难执行成功。需要的条件太多而且比较难相对于一个攻击者去完成，但是，这相较于夸用户销毁相对简单很多去利用这项技术。

A Cache Poisoning attack is possible because of HTTP Response Splitting and flaws in the web application. It is crucial from the attacker's point of view that the application allows for filling the header field with more than one header using CR (Carrige Return) and LF (Line Feed) characters.
由于web应用中的HTTP回应截断和漏洞导致缓存中断是可能执行的。应用程序运行用多个回车换行填充头部是攻击认为的关键点。
Examples

We have found a web page, which gets its service name from the "page" argument and then redirects (302) to this service.
我们找到一个web页面，通过page参数获得服务器名字，然后重定向到该服务器
e.g. http://testsite.com/redir.php?page=http://other.testsite.com/

And exemplary code of the redir.php:

rezos@dojo ~/public_html $ cat redir.php
<?php
header ("Location: " . $_GET['page']);
?>

Crafting appropriate request: [1
构造合适的请求
1 - remove page from the cache
删除缓存中的页面
GET http://testsite.com/index.html HTTP/1.1
Pragma: no-cache
Host: testsite.com
User-Agent: Mozilla/4.7 [en] (WinNT; I)
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg,
image/png, */*
Accept-Encoding: gzip
Accept-Language: en
Accept-Charset: iso-8859-1,*,utf-8

HTTP header fields "Pragma: no-cache" or "Cache-Control: no-cache" will remove the page from cache (if the page is stored in cache, obviously).
HTTP头部域“pragma:no-cache”或者“Cache-Control:no-cache”会把缓存中的页面删除掉（显然，如果页面存在缓存中的话）

2 - using HTTP Response Splitting we force cache server to generate two responses to one request
利用HTTP截断我们强制缓存服务器产生两个请求形成一个请求
GET http://testsite.com/redir.php?site=%0d%0aContent-
Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aLast-
Modified:%20Mon,%2027%20Oct%202009%2014:50:18%20GMT%0d%0aConte
nt-Length:%2020%0d%0aContent-
Type:%20text/html%0d%0a%0d%0a<html>deface!</html> HTTP/1.1
Host: testsite.com
User-Agent: Mozilla/4.7 [en] (WinNT; I)
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg,
image/png, */*
Accept-Encoding: gzip
Accept-Language: en
Accept-Charset: iso-8859-1,*,utf-8

We are intentionally setting the future time (in the header it's set to 27 October 2009) in the second response HTTP header "Last-Modified" to store the response in the cache.
我们有意在第二个HTTP响应头中设置将来的时间“Last-Modified”去把响应保存在缓存中（在头部中被设置成2009/11/27）
We may get this effect by setting the following headers:

    Last-Modified (checked byt the If-Modified-Since header)
    ETag (checked by the If-None-Match header)

3 - sending request for the page, which we want to replace in the cache of the server

GET http://testsite.com/index.html HTTP/1.1
Host: testsite.com
User-Agent: Mozilla/4.7 [en] (WinNT; I)
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg,
image/png, */*
Accept-Encoding: gzip
Accept-Language: en
Accept-Charset: iso-8859-1,*,utf-8

In theory, the cache server should match the second answer from the request #2 to the request #3. In this way we've replaced the cache content.
理论上，缓存服务器会匹配第二个而且请求的第二步中的应答给第三步，用这种方法，我们替换了缓存内容
The rest of the requests should be executed during one connection (if the cache server doesn't require a more sophisticated method to be used), possibly immediately one after another.
其余的请求应该在一个连接期间执行(如果缓存服务器不需要使用更复杂的方法)，可能会一个接一个地执行。
It may appear problematic to use this attack as a universal techique for cache poisoning. It's due to cache server's different connection model and request proccessing implementations. What does it mean? That for example effective method to poison Apache 2.x cache with mod_proxy and mod_cache modules won't work with Squid.
使用此攻击作为缓存中毒的通用技术可能会出现问题。这是由于缓存服务器的不同连接模型和请求处理实现。这是什么意思？例如，使用mod_proxy和mod_cache模块对Apache2.x缓存进行毒化的有效方法将不能用于SQUID。
A different problem is the length of the URI, which sometime makes it impossible to put the necessary response header, which would next be matched to the request for the poisoned page.
另一个不同的问题是uri的长度，有时这使得不可能放置必要的响应头，接下来将与中毒页面的请求匹配。 

The request examples used are from [1], which were modified on the needs of the article.
使用的请求示例来自。[1]，根据该条的需要作了修改。 
More information can be found in this document, which focuses on these kinds of attacks [1] http://packetstormsecurity.org/papers/general/whitepaper_httpresponse.pdf by Amit Klein, Director of Security and Research
Related Threat Agents

    TBD

Related Attacks

    HTTP Response Splitting
    Cross-User_Defacement

Related Vulnerabilities

    Category:Input Validation Vulnerability

Related Controls

    Input_Validation
    Canonicalization